// Generated by CoffeeScript 1.6.1
(function() {
  var LatLon, RedisTweetCounts,
    _this = this;

  LatLon = require("./LatLon");

  RedisTweetCounts = (function() {

    function RedisTweetCounts(redis, precision) {
      var _this = this;
      this.redis = redis;
      this.precision = precision;
      this.latLonFullId = function(latLon) {
        return RedisTweetCounts.prototype.latLonFullId.apply(_this, arguments);
      };
      this.version = "v3";
      this.prefix = "" + this.version + ".geohash:" + this.precision + ":";
    }

    RedisTweetCounts.prototype.add = function(latLon, text) {
      var latLonId, nGram, nGramId, _i, _len, _ref, _results;
      this.redis.incr("" + this.version + "." + this.precision + ":count");
      latLonId = this.latLonFullId(latLon);
      this.redis.zincrby("" + this.version + ".geohashes:" + this.precision, 1, latLonId);
      _ref = text.nGrams;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        nGram = _ref[_i];
        nGramId = "" + this.version + ".ngram:" + text.length + ":" + nGram;
        this.redis.zincrby("" + this.version + ".ngrams:" + text.length, 1, nGramId);
        this.redis.hincrby(latLonId, nGramId, 1);
        _results.push(this.redis.hincrby(nGramId, latLonId, 1));
      }
      return _results;
    };

    RedisTweetCounts.prototype.latLonFullId = function(latLon) {
      return "" + this.prefix + (latLon.toGeoHash(this.precision));
    };

    RedisTweetCounts.prototype.dump = function(callback) {
      var _this = this;
      return this.redis.get("" + this.version + "." + this.precision + ":count", function(err, totalBuffer) {
        var total;
        if (err != null) {
          console.log(err);
          return callback({
            'total': 0,
            'counts': 0
          });
        } else {
          total = parseInt(totalBuffer.toString());
          return _this.redis.zrevrange(["" + _this.version + ".geohashes:" + _this.precision, 0, -1, 'withscores'], function(err, response) {
            var count, counts, entry, fullId, geoHash, keyIndex, _i, _ref;
            counts = [];
            for (keyIndex = _i = 0, _ref = response.length; _i < _ref; keyIndex = _i += 2) {
              fullId = response[keyIndex];
              geoHash = fullId.toString().substring(_this.prefix.length);
              count = parseInt(response[keyIndex + 1].toString());
              entry = {
                lat_lon: LatLon.fromGeoHash(geoHash),
                count: count
              };
              counts.push(entry);
            }
            return callback({
              'total': total,
              'counts': counts
            });
          });
        }
      });
    };

    return RedisTweetCounts;

  })();

  module.exports = RedisTweetCounts;

}).call(this);
