// Generated by CoffeeScript 1.6.1
(function() {
  var GeoHashRegion, LatLon, RedisTweetCounts, _,
    _this = this;

  _ = require('underscore');

  LatLon = require("./LatLon");

  GeoHashRegion = require("./GeoHashRegion");

  RedisTweetCounts = (function() {

    function RedisTweetCounts(redis, precision) {
      var _this = this;
      this.redis = redis;
      this.precision = precision;
      this.overallNGramCounts = function(callback) {
        return RedisTweetCounts.prototype.overallNGramCounts.apply(_this, arguments);
      };
      this.ngramCountsForRegion = function(geoHash, callback) {
        return RedisTweetCounts.prototype.ngramCountsForRegion.apply(_this, arguments);
      };
      this.tweetCountsPerRegion = function(callback) {
        return RedisTweetCounts.prototype.tweetCountsPerRegion.apply(_this, arguments);
      };
      this.summariseRegions = function(callback) {
        return RedisTweetCounts.prototype.summariseRegions.apply(_this, arguments);
      };
      this.fullGeoHashId = function(latLon) {
        return RedisTweetCounts.prototype.fullGeoHashId.apply(_this, arguments);
      };
      this.version = "v3";
      this.prefix = "" + this.version + ".geohash:" + this.precision + ":";
    }

    RedisTweetCounts.prototype.add = function(latLon, text) {
      var fullGeoHashId, nGram, nGramId, _i, _len, _ref, _results;
      this.redis.incr("" + this.version + "." + this.precision + ":count");
      fullGeoHashId = this.fullGeoHashId(latLon);
      this.redis.zincrby("" + this.version + ".geohashes:" + this.precision, 1, fullGeoHashId);
      _ref = text.nGrams;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        nGram = _ref[_i];
        nGramId = "" + this.version + ".ngram:" + text.length + ":" + nGram;
        this.redis.zincrby("" + this.version + ".ngrams:" + text.length, 1, nGramId);
        this.redis.hincrby(fullGeoHashId, nGramId, 1);
        _results.push(this.redis.hincrby(nGramId, fullGeoHashId, 1));
      }
      return _results;
    };

    RedisTweetCounts.prototype.collectMetrics = function(collector) {
      var _this = this;
      return this.redis.get("" + this.version + "." + this.precision + ":count", function(err, totalBuffer) {
        var total;
        if ((err == null) && (totalBuffer != null)) {
          total = parseInt(totalBuffer.toString());
          return collector.send("tweets.total", total);
        }
      });
    };

    RedisTweetCounts.prototype.fullGeoHashId = function(latLon) {
      return "" + this.prefix + (GeoHashRegion.fromPointInRegion(latLon, this.precision));
    };

    RedisTweetCounts.prototype.summariseRegions = function(callback) {
      var _this = this;
      return this.tweetCountsPerRegion(function(results) {
        var result, withSummaries;
        withSummaries = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = results.length; _i < _len; _i++) {
            result = results[_i];
            _results.push({
              region: result.region,
              summary: {
                tweets: result.tweets
              }
            });
          }
          return _results;
        })();
        return callback(withSummaries);
      });
    };

    RedisTweetCounts.prototype.tweetCountsPerRegion = function(callback) {
      var _this = this;
      return this.redis.zrevrange(["" + this.version + ".geohashes:" + this.precision, 0, -1, 'withscores'], function(err, response) {
        var count, fullId, geoHash, keyIndex, result, results, _i, _ref;
        results = [];
        for (keyIndex = _i = 0, _ref = response.length; _i < _ref; keyIndex = _i += 2) {
          fullId = response[keyIndex];
          geoHash = fullId.toString().substring(_this.prefix.length);
          count = parseInt(response[keyIndex + 1].toString());
          result = {
            region: GeoHashRegion.fromHash(geoHash),
            tweets: count
          };
          results.push(result);
        }
        return callback(results);
      });
    };

    RedisTweetCounts.prototype.ngramCountsForRegion = function(geoHash, callback) {
      var _this = this;
      return this.redis.hgetall("" + this.prefix + geoHash, function(err, response) {
        var count, fullNGramId, ngram, result, results, value;
        results = [];
        for (fullNGramId in response) {
          value = response[fullNGramId];
          ngram = fullNGramId.toString().substring(("" + _this.version + ".ngram:").length);
          count = parseInt(value.toString());
          result = {
            ngram: ngram,
            tweets: count
          };
          results.push(result);
        }
        return callback(_.sortBy(results, function(d) {
          return -1 * d.tweets;
        }));
      });
    };

    RedisTweetCounts.prototype.overallNGramCounts = function(callback) {
      var _this = this;
      return this.redis.zrevrange(["" + this.version + ".ngrams:2", 0, -1, 'withscores'], function(err, response) {
        var count, fullId, keyIndex, ngram, result, results, _i, _ref;
        results = [];
        for (keyIndex = _i = 0, _ref = response.length; _i < _ref; keyIndex = _i += 2) {
          fullId = response[keyIndex];
          ngram = fullId.toString().substring(("" + _this.version + ".ngram:").length);
          count = parseInt(response[keyIndex + 1].toString());
          result = {
            ngram: ngram,
            tweets: count
          };
          results.push(result);
        }
        return callback(results);
      });
    };

    RedisTweetCounts.prototype.dump = function(callback) {
      var _this = this;
      return this.redis.get("" + this.version + "." + this.precision + ":count", function(err, totalBuffer) {
        var total;
        if (err != null) {
          console.log(err);
          return callback({
            'total': 0,
            'counts': 0
          });
        } else {
          total = parseInt(totalBuffer.toString());
          return _this.redis.zrevrange(["" + _this.version + ".geohashes:" + _this.precision, 0, -1, 'withscores'], function(err, response) {
            var count, counts, entry, fullId, geoHash, keyIndex, _i, _ref;
            counts = [];
            for (keyIndex = _i = 0, _ref = response.length; _i < _ref; keyIndex = _i += 2) {
              fullId = response[keyIndex];
              geoHash = fullId.toString().substring(_this.prefix.length);
              count = parseInt(response[keyIndex + 1].toString());
              entry = {
                lat_lon: GeoHashRegion.fromHash(geoHash).center,
                count: count
              };
              counts.push(entry);
            }
            return callback({
              'total': total,
              'counts': counts
            });
          });
        }
      });
    };

    return RedisTweetCounts;

  })();

  module.exports = RedisTweetCounts;

}).call(this);
