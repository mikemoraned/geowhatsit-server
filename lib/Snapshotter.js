// Generated by CoffeeScript 1.6.3
(function() {
  var REQUEST, Snapshotter, URL,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  URL = require("url");

  REQUEST = require("request");

  Snapshotter = (function() {
    function Snapshotter(s3) {
      this.s3 = s3;
      this._snapshot = __bind(this._snapshot, this);
      this.beginPolling = __bind(this.beginPolling, this);
    }

    Snapshotter.prototype.beginPolling = function(url, path, interval) {
      var job,
        _this = this;
      console.log("Will collect snapshot of " + url + " every " + interval + " millis");
      job = function() {
        return _this._snapshot(url, path);
      };
      setInterval(job, interval);
      return job();
    };

    Snapshotter.prototype._snapshot = function(url, destinationPath) {
      var timestamp,
        _this = this;
      timestamp = Date.now();
      console.log("Snapshotting at " + timestamp);
      return REQUEST(url, function(error, response, body) {
        var path, s3Request;
        if (!error && response.statusCode === 200) {
          console.dir(response.headers);
          path = "" + timestamp + "/" + destinationPath;
          s3Request = _this.s3.put(path, {
            'Content-Length': response.headers['content-length'],
            'Content-Type': response.headers['content-type'],
            'Date': response.headers['date'],
            'x-amz-storage-class': 'REDUCED_REDUNDANCY'
          });
          s3Request.on('response', function(result) {
            if (result.statusCode === 200) {
              return console.log('saved to %s', s3Request.url);
            } else {
              return console.log('could not save to %s', s3Request.url);
            }
          });
          return s3Request.end(body);
        }
      });
    };

    return Snapshotter;

  })();

  module.exports = Snapshotter;

}).call(this);

/*
//@ sourceMappingURL=Snapshotter.map
*/
