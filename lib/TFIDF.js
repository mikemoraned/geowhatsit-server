// Generated by CoffeeScript 1.6.1
(function() {
  var TFIDF, _,
    _this = this;

  _ = require('underscore');

  TFIDF = (function() {

    function TFIDF(tweetCounts) {
      var _this = this;
      this.tweetCounts = tweetCounts;
      this.tfidf = function(ngram, tweetsForNGram, regionCountForNGram, totalRegionCount) {
        return TFIDF.prototype.tfidf.apply(_this, arguments);
      };
    }

    TFIDF.prototype.ngramsForRegionOrderedByScore = function(region, callback) {
      var _this = this;
      return this.tweetCounts.countRegions(function(totalRegionCount) {
        return _this.tweetCounts.ngramCountsForRegion(region, function(forRegion) {
          var entry, numNGrams, regionCountForNGram, returned, _i, _len, _results;
          numNGrams = forRegion.length;
          returned = 0;
          regionCountForNGram = {};
          _results = [];
          for (_i = 0, _len = forRegion.length; _i < _len; _i++) {
            entry = forRegion[_i];
            _results.push(_this.tweetCounts.countRegionsInWhichNGramOccurs(entry.ngram, function(result) {
              var ngramsWithCountAndTFIDF, _j, _len1;
              returned += 1;
              regionCountForNGram[result.ngram] = result.regions;
              if (returned === numNGrams) {
                ngramsWithCountAndTFIDF = [];
                for (_j = 0, _len1 = forRegion.length; _j < _len1; _j++) {
                  entry = forRegion[_j];
                  ngramsWithCountAndTFIDF.push(_this.tfidf(entry.ngram, entry.tweets, regionCountForNGram[entry.ngram], totalRegionCount));
                }
                return callback(_.chain(ngramsWithCountAndTFIDF).sortBy(function(d) {
                  return -1 * d.tf_idf;
                }).value());
              }
            }));
          }
          return _results;
        });
      });
    };

    TFIDF.prototype.scoredRegionsForNGrams = function(ngrams, callback) {
      var _this = this;
      return this.tweetCounts.countRegions(function(totalRegionCount) {
        return _this.tweetCounts.tweetCountsByRegionForNGrams(ngrams, function(results) {
          var byRegion, entry, ngram, region, regionCountForNGram, result, tfidfs, _i, _j, _len, _len1, _ref;
          byRegion = {};
          for (_i = 0, _len = results.length; _i < _len; _i++) {
            result = results[_i];
            ngram = result.ngram;
            regionCountForNGram = result.regions.length;
            _ref = result.regions;
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              entry = _ref[_j];
              if (byRegion[entry.region] == null) {
                byRegion[entry.region] = [];
              }
              byRegion[entry.region].push(_this.tfidf(ngram, entry.tweets, regionCountForNGram, totalRegionCount));
            }
          }
          return callback((function() {
            var _results;
            _results = [];
            for (region in byRegion) {
              tfidfs = byRegion[region];
              _results.push({
                region: region,
                scores: tfidfs
              });
            }
            return _results;
          })());
        });
      });
    };

    TFIDF.prototype.tfidf = function(ngram, tweetsForNGram, regionCountForNGram, totalRegionCount) {
      var idf, tf;
      idf = Math.log(totalRegionCount / regionCountForNGram);
      tf = tweetsForNGram;
      return {
        ngram: ngram,
        tweets: tweetsForNGram,
        tf: tf,
        idf: idf,
        tf_idf: tf * idf
      };
    };

    return TFIDF;

  })();

  module.exports = TFIDF;

}).call(this);
