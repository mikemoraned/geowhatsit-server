// Generated by CoffeeScript 1.6.1
(function() {
  var EvaluateFromStream, LatLon, PhraseSignature, Stream, url, urlencode,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  url = require("url");

  urlencode = require("urlencode");

  LatLon = require("./LatLon");

  Stream = require("./Stream");

  PhraseSignature = require("./PhraseSignature");

  EvaluateFromStream = (function(_super) {

    __extends(EvaluateFromStream, _super);

    function EvaluateFromStream(baseURL, twitter, restartAfterSeconds) {
      var _this = this;
      this.baseURL = baseURL;
      this.handleData = function(data) {
        return EvaluateFromStream.prototype.handleData.apply(_this, arguments);
      };
      EvaluateFromStream.__super__.constructor.call(this, twitter, restartAfterSeconds);
    }

    EvaluateFromStream.prototype.handleData = function(data) {
      var latLon, locationURL, phraseURL, sig;
      if ((data.geo != null) && (data.geo.coordinates != null)) {
        latLon = new LatLon(data.geo.coordinates[0], data.geo.coordinates[1]);
        sig = PhraseSignature.fromPhrase(data.text, 2);
        try {
          locationURL = url.resolve(this.baseURL, "/locations/" + latLon.latitude + "," + latLon.longitude);
          phraseURL = url.resolve(this.baseURL, "/phrases/" + (urlencode(sig.toSignature())));
          return console.log("location: " + locationURL + ", phrase: " + phraseURL);
        } catch (e) {
          console.dir(e);
          return console.dir(("ignoring tweet: https://twitter.com/" + data.user.screen_name + "/status/" + data.id_str + ", text: \"") + data.text + "\"");
        }
      }
    };

    return EvaluateFromStream;

  })(Stream);

  module.exports = EvaluateFromStream;

}).call(this);
