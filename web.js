// Generated by CoffeeScript 1.6.1
(function() {
  var LatLon, TweetCounts, app, express, geolib, port, tweetCounts, twit, twitter, util;

  express = require("express");

  app = express();

  app.use(express.logger());

  util = require('util');

  twitter = require('twitter');

  twit = new twitter({
    consumer_key: 'mCp0qZ0zGGcvA9ZKVo7xQ',
    consumer_secret: 'X1Z4FaK8Hv68ZoTUCmiRjDy6IP5d5n7OHYwC6es4A',
    access_token_key: '11510772-MZIWUADlvY7A9Cbz6kKpqbuRM7EfWrdskAnXNpxpE',
    access_token_secret: process.env['TWITTER_ACCESS_TOKEN_SECRET']
  });

  geolib = require('geolib');

  LatLon = (function() {

    function LatLon(lat, lon) {
      this.latitude = lat;
      this.longitude = lon;
    }

    LatLon.prototype.canonicalId = function() {
      return "" + this.latitude + "," + this.longitude;
    };

    return LatLon;

  })();

  TweetCounts = (function() {

    function TweetCounts() {
      this.total = 0;
      this.map = {};
    }

    TweetCounts.prototype.add = function(latLon) {
      var count, id;
      this.total++;
      id = latLon.canonicalId();
      count = this.map[id];
      if (count != null) {
        return this.map[id] = count + 1;
      } else {
        return this.map[id] = 1;
      }
    };

    TweetCounts.prototype.dump = function() {
      return {
        'total': this.total,
        'lat_lon': this.map
      };
    };

    return TweetCounts;

  })();

  tweetCounts = new TweetCounts;

  twit.stream('statuses/sample', function(stream) {
    return stream.on('data', function(data) {
      if ((data.geo != null) && (data.geo.coordinates != null)) {
        return tweetCounts.add(new LatLon(data.geo.coordinates[0], data.geo.coordinates[1]));
      }
    });
  });

  app.all('*', function(req, resp, next) {
    resp.header("Access-Control-Allow-Origin", "*");
    resp.header("Access-Control-Allow-Headers", "X-Requested-With");
    return next();
  });

  app.get('/', function(req, resp) {
    return resp.send('Hello World!');
  });

  app.get('/counts.json', function(req, resp) {
    return resp.send(tweetCounts.dump());
  });

  port = process.env.PORT || 5000;

  app.listen(port, function() {
    return console.log("Listening on " + port);
  });

}).call(this);
