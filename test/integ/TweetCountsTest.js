// Generated by CoffeeScript 1.6.1
(function() {
  var LatLon, RedisTweetCounts, TweetCountsFactory, assert, fillInNullForError, latLonExample, name, precision, text, vows,
    _this = this;

  vows = require('vows');

  assert = require('assert');

  RedisTweetCounts = require('../../lib/RedisTweetCounts');

  TweetCountsFactory = require('../../lib/TweetCountsFactory');

  LatLon = require('../../lib/LatLon');

  latLonExample = new LatLon(57.64911, 10.40744);

  text = {
    nGrams: ["aa", "bb"],
    length: 2
  };

  name = "TweetCountsTest_" + (Math.random());

  precision = 2;

  fillInNullForError = function(callback) {
    return function(realResult) {
      return callback(null, realResult);
    };
  };

  vows.describe('TweetCounts').addBatch({
    'when using TweetCounts impl from factory': {
      topic: TweetCountsFactory.create(name, precision),
      'when new text is added': {
        topic: function(tweetCounts) {
          tweetCounts.add(latLonExample, text);
          return text;
        },
        'when we ask for overall ngram counts': {
          topic: function(text, tweetCounts) {
            tweetCounts.overallNGramCounts(fillInNullForError(this.callback));
          },
          'all ngrams have one tweet registered': function(counts) {
            var countForNGram, item, _i, _len;
            countForNGram = {};
            for (_i = 0, _len = counts.length; _i < _len; _i++) {
              item = counts[_i];
              countForNGram[item.ngram] = item.tweets;
            }
            assert.equal(countForNGram["2:aa"], 1);
            return assert.equal(countForNGram["2:bb"], 1);
          }
        }
      }
    }
  })["export"](module);

}).call(this);
